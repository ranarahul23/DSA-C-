TreeNode<int>* inordertobst(int s,int e,vector<int> &in){
    if(s>e){
        return NULL;
    }
    int mid=(s+e)/2;
    TreeNode<int>* root=new TreeNode<int>(in[mid]);
    root->left=inordertobst(s,mid-1,in);
    root->right=inordertobst(mid+1,e,in);
    return root;
}
vector<int> mergearrays(vector<int> &a,vector<int> &b){
    int i=0;
    int j=0;
    int k=0;
    vector<int> ans(a.size()+b.size());
    while(i<a.size()&&j<b.size()){
        if(a[i]<b[j]){
            ans[k++]=a[i];
            i++;
        }
        else{
            ans[k++]=b[j];
            j++;
        }
    }
    while(i<a.size()){
        ans[k++]=a[i];
            i++;
    }
    while(j<b.size()){
        ans[k++]=b[j];
        j++;
    }
    return ans;

}

void inorder(TreeNode<int>* root,vector<int> &in){
    if(root==NULL){
        return; 
    }
    inorder(root->left,in);
    in.push_back(root->data);
    inorder(root->right,in);
}
TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    vector<int> bst1,bst2;
    inorder(root1,bst1);
    inorder(root2,bst2);
    vector<int> mergearray=mergearrays(bst1,bst2);
    int s=0;
    int e=mergearray.size()-1;
    return inordertobst(s,e,mergearray);
}
