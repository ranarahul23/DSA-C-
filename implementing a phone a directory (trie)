class trienode{
    public:
    trienode* children[26];
    char data;
    bool isterminal;

    trienode(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]==NULL;
        }
        isterminal=false;

    }

    
};
class trie{
    public:
    trienode* root;
    trie(){
        root=new trienode('\0');
    }
    void insertutill(trienode* root,string word){
        if(word.length()==0){
            root->isterminal=true;
            return;
        }
        int index=word[0]-'a';
        trienode* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new trienode(word[0]);
            root->children[index]=child;

        }
        insertutill(child,word.substr(1));

    }
    void insertword(string word){
        insertutill(root,word);
    }
};
void printsuggestion(trienode* curr,vector<string> &temp,string prefix){
    if(curr->isterminal=true){
        temp.push_back(prefix);

    }
    for(char ch='a';ch<='z';ch++){
        trienode* next=curr->children[ch-'a'];
        if(next!=NULL){
            prefix.push_back(ch);
            printsuggestion(curr,temp,prefix);
            prefix.pop_back();
        }
    }
}
vector<vector<string>> getsuggestion(string str){
    trienode* prev=root;
    vector<vector<string>> output;
    string prefix="";
    for(int i=0;i<str.length();i++){
        char lastch=str[i];
        prefix.push_back(lastch);
        trienode* curr=prev->children[lastch-'a'];
        if(curr==NULL){
            break;
        }
        vector<string> temp;
        printsuggestion(curr,temp,prefix);
        output.push_back(temp);
        temp.clear();
        prev=curr;
    }
    return output;
}
vector<vector<string>> phoneDirectory(vector<string>&contactList, string &queryStr)
{
     trie *t=new trie();
     for(int i=0;i<contactList.size();i++){
         string str=contactList[i];
         t->insertword(str);
     }
     return getsuggestion(queryStr);
}
