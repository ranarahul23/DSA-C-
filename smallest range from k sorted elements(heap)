#include<queue>
#include<limits.h>
class Node{
    public:
      int data;
      int row;
      int col;
    Node(int data,int i,int j){
        this->data=data;
        this->row=i;
        this->col=j;
    }
};
class compare{
  public:
    bool operator()(Node* a,Node* b){
        return a->data >  b->data;
    }
};
int kSorted(vector<vector<int>> &a, int k, int n) {
    
    int mini=INT_MAX,maxi=INT_MIN;
    priority_queue<Node*,vector<Node*>,compare> pq;
//     step:1 create a min Heap for starting element of each list and tracking
//     mini and maxi
    for(int i=0;i<k;i++){
//         Node* tmp=new Node(kArrays[i][0],i,0);
        int element=a[i][0];
        mini=min(mini,element);
        maxi=max(maxi,element);
        pq.push(new Node(element,i,0));
    }
    int start=mini,end=maxi;
//   processing the ranges  
    while(!pq.empty()){
//         mini fetch
        Node* temp=pq.top();
        pq.pop();
        mini=temp->data;
//         range or answer updation
        if(maxi-mini < end-start){
            start=mini;
            end=maxi;
        }
//       next element exists  
        if(temp->col +1 <n){
            maxi=max(maxi,a[temp->row][temp->col + 1]);
            pq.push(new Node(a[temp->row][temp->col + 1]
                             ,temp->row,temp->col + 1));
        }else{
//             no next element
            break;
        }
    }
    return (end - start +1);  
    
    
}
